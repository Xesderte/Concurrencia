/* This JR file was generated by m2jr */
/* for the signal and wait signaling discipline */


// Monitor.m, line 1: _monitor Monitor {  //HOARE -problema de la pizzerÃ­a.

class Monitor {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Monitor(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Monitor.m, line 2: 


// Monitor.m, line 3:     _condvar ponerQueso;


// Monitor.m, line 4:     _condvar ponerSalsa;

private m_condvar ponerQueso = new m_condvar("ponerQueso");

// Monitor.m, line 5:     _condvar ponerMorron;

private m_condvar ponerSalsa = new m_condvar("ponerSalsa");

// Monitor.m, line 6:     _condvar prepararPizza;  

private m_condvar ponerMorron = new m_condvar("ponerMorron");

// Monitor.m, line 7: 


// Monitor.m, line 8:     _var int totales = 0;

private m_condvar prepararPizza = new m_condvar("prepararPizza");
private int
totales
=0;
// Monitor.m, line 9:     _var boolean ayudanteQuesolisto = false;

private boolean
ayudanteQuesolisto
=false
;
// Monitor.m, line 10:     _var boolean ayudanteMorronlisto = false;

private boolean
ayudanteMorronlisto
=false
;
// Monitor.m, line 11:     _var boolean ayudanteSalsalisto = false;

private boolean
ayudanteSalsalisto
=false
;
// Monitor.m, line 12: 


// Monitor.m, line 13: 


// Monitor.m, line 14:     _proc void colocarQueso(){

public
void
colocarQueso
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 15:         ayudanteQuesolisto = true;

ayudanteQuesolisto
=true
;
// Monitor.m, line 16:         _signal(prepararPizza); // Notificar que el ayudante de queso esta listo

{ if ((prepararPizza ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 17:         _wait(ponerQueso); // Esperar a que se le indique que ponga el queso

{  m_condvar m_cv = (ponerQueso );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 18:         System.out.println("poner queso");

System
.out
.println
("poner queso");
// Monitor.m, line 19:         _signal(prepararPizza); // Notificar que el queso se ha puesto

{ if ((prepararPizza ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 20:         


// Monitor.m, line 21:     }


// Monitor.m, line 22: 


// Monitor.m, line 23:     _proc void colocarMorron(){

  m_next();
}
public
void
colocarMorron
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 24:         ayudanteMorronlisto = true;

ayudanteMorronlisto
=true
;
// Monitor.m, line 25:         _signal(prepararPizza);

{ if ((prepararPizza ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 26:         _wait(ponerMorron);

{  m_condvar m_cv = (ponerMorron );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 27:         System.out.println("poner morron");

System
.out
.println
("poner morron");
// Monitor.m, line 28:         _signal(prepararPizza);

{ if ((prepararPizza ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 29: 


// Monitor.m, line 30:     }


// Monitor.m, line 31: 


// Monitor.m, line 32:     _proc void colocarSalsa(){

  m_next();
}
public
void
colocarSalsa
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 33:         ayudanteSalsalisto = true;

ayudanteSalsalisto
=true
;
// Monitor.m, line 34:         _signal(prepararPizza);

{ if ((prepararPizza ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 35:         _wait(ponerSalsa);

{  m_condvar m_cv = (ponerSalsa );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 36:         System.out.println("poner salsa");

System
.out
.println
("poner salsa");
// Monitor.m, line 37:         _signal(prepararPizza);

{ if ((prepararPizza ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 38: 


// Monitor.m, line 39:     }


// Monitor.m, line 40: 


// Monitor.m, line 41:     _proc void terminarPizza(int i){

  m_next();
}
public
void
terminarPizza
(int
i
){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 42:         if(i==1){

if
(i
==1){
// Monitor.m, line 43:             System.out.println("esperar a queso");

System
.out
.println
("esperar a queso");
// Monitor.m, line 44:             while(!ayudanteQuesolisto){

while
(!ayudanteQuesolisto
){
// Monitor.m, line 45:                 _wait(prepararPizza);

{  m_condvar m_cv = (prepararPizza );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 46:             }


// Monitor.m, line 47:             ayudanteQuesolisto = false; // Resetear el estado del ayudante

}ayudanteQuesolisto
=false
;
// Monitor.m, line 48:             System.out.println("llamar a queso");

System
.out
.println
("llamar a queso");
// Monitor.m, line 49:             _signal(ponerQueso);

{ if ((ponerQueso ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 50:             _wait(prepararPizza); //esperar a que el queso se ponga

{  m_condvar m_cv = (prepararPizza );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 51:         }else if(i==2){

}else
if
(i
==2){
// Monitor.m, line 52:             System.out.println("esperar a morron");

System
.out
.println
("esperar a morron");
// Monitor.m, line 53:             while(!ayudanteMorronlisto){

while
(!ayudanteMorronlisto
){
// Monitor.m, line 54:                 _wait(prepararPizza);

{  m_condvar m_cv = (prepararPizza );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 55:             }


// Monitor.m, line 56:             ayudanteMorronlisto = false;

}ayudanteMorronlisto
=false
;
// Monitor.m, line 57:             System.out.println("llamar a morron");

System
.out
.println
("llamar a morron");
// Monitor.m, line 58:             _signal(ponerMorron);

{ if ((ponerMorron ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 59:             _wait(prepararPizza);

{  m_condvar m_cv = (prepararPizza );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 60:         }else {

}else
{
// Monitor.m, line 61:             System.out.println("esperar a salsa");

System
.out
.println
("esperar a salsa");
// Monitor.m, line 62:             while(!ayudanteSalsalisto){

while
(!ayudanteSalsalisto
){
// Monitor.m, line 63:                 _wait(prepararPizza);

{  m_condvar m_cv = (prepararPizza );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 64:             }


// Monitor.m, line 65:             ayudanteSalsalisto = false;

}ayudanteSalsalisto
=false
;
// Monitor.m, line 66:             System.out.println("llamar a salsa");

System
.out
.println
("llamar a salsa");
// Monitor.m, line 67:             _signal(ponerSalsa);

{ if ((ponerSalsa ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 68:             _wait(prepararPizza);

{  m_condvar m_cv = (prepararPizza );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 69:         }


// Monitor.m, line 70: 


// Monitor.m, line 71:         totales++;

}totales
++;
// Monitor.m, line 72:         System.out.println("Pizza terminada. Total pizzas: " + totales);

System
.out
.println
("Pizza terminada. Total pizzas: "+totales
);
// Monitor.m, line 73:     }


// Monitor.m, line 74: 


// Monitor.m, line 75: 


// Monitor.m, line 76: }

  m_next();
}

// Monitor.m, line 77: 


// Monitor.m, line 78: //Para compilar y hacer un Singal and Wait es de esta manera    m2jr -sw MonitorTest.m

}
